{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾瑞可erik • All posts by \"数据库\" categories",
    "description": "一只PHP开发的程序猿，偶尔做做运维、Goland、Python、Java、摄影、画画、写作、顺便睡觉，反正整站都搞过。",
    "home_page_url": "https://erik.xyz",
    "items": [
        {
            "id": "https://erik.xyz/2020/03/17/nosql-db-presentation/",
            "url": "https://erik.xyz/2020/03/17/nosql-db-presentation/",
            "title": "nosql数据库的介绍",
            "date_published": "2020-03-16T17:35:00.000Z",
            "content_html": "<p>根据<a href=\"https://nosql-database.org\">NoSQL官网</a>查阅，结合网上资料做一个简单介绍。</p>\n<h4 id=\"键值数据库\"><a href=\"#键值数据库\" class=\"headerlink\" title=\"键值数据库\"></a>键值数据库</h4><ul>\n<li><p>目前使用较多的</p>\n<ul>\n<li><a href=\"https://redis.io\">redis</a>（开源）</li>\n<li><a href=\"https://memcached.org\">memcached</a>（开源）</li>\n</ul>\n</li>\n<li><p>特点：</p>\n<pre><code>  基于内存数据处理，相对速度最快；数据存储结构最简单，只有key-value形式；对值的查询统计功能支持很弱；由于基于内存数据处理，数据持久性相对较弱。但，redis具备大数据管理能力；事务处理能力弱。\n</code></pre><span id=\"more\"></span>\n<h4 id=\"文档数据库\"><a href=\"#文档数据库\" class=\"headerlink\" title=\"文档数据库\"></a>文档数据库</h4></li>\n<li><p>目前使用较多的</p>\n<ul>\n<li><a href=\"https://www.mongodb.com\">mongodb</a>（开源）</li>\n<li><a href=\"https://www.couchbase.com\">couchbase</a>（开源）</li>\n</ul>\n</li>\n<li><p>特点：</p>\n<pre><code>  mongodb基于硬盘数据处理，速度比sql数据库提高十几倍；couchbase基于内存处理；两者都具有很强的横向扩展能力；文档数据库的值具备复杂文档结构数据的处理能力，查询统计性能相对比键值数据库要强。具备大数据处理能力；无事务处理能力。\n</code></pre></li>\n</ul>\n<h4 id=\"列族数据库\"><a href=\"#列族数据库\" class=\"headerlink\" title=\"列族数据库\"></a>列族数据库</h4><ul>\n<li><p>目前使用较多的</p>\n<ul>\n<li><a href=\"https://cassandra.apache.org\">cassandra</a>（开源）</li>\n<li><a href=\"https://hbase.apache.org\">hbase</a>（开源）</li>\n</ul>\n</li>\n<li><p>特点：</p>\n<pre><code>  基于硬盘数据处理，主要用于大数据处理，写速度明显比读速度要快，整体读写速度较键值数据库、文档数据库要慢；有强大的数据查询统计功能；无事务处理能力。\n</code></pre></li>\n</ul>\n<h4 id=\"图数据库\"><a href=\"#图数据库\" class=\"headerlink\" title=\"图数据库\"></a>图数据库</h4><ul>\n<li><p>目前使用较多的</p>\n<ul>\n<li><a href=\"https://neo4j.com\">neo4j</a>（早期版本开源）</li>\n<li><a href=\"https://orientdb.com\">orientdb</a>（开源）</li>\n</ul>\n</li>\n<li><p>特点：</p>\n<pre><code>      基于硬盘的数据处理，侧重图（这里的图是数学里的“图论”，即一个包含若干个节点、节点之间存在边关系，节点和边可以附加相关属性的结合系统）数据查询计算。ACID事务\n</code></pre></li>\n</ul>\n<h4 id=\"多模式数据库\"><a href=\"#多模式数据库\" class=\"headerlink\" title=\"多模式数据库\"></a>多模式数据库</h4><ul>\n<li>目前使用较多的<ul>\n<li><a href=\"https://www.arangodb.com\">ArangoDB</a>（开源+商业）</li>\n<li><a href=\"http://virtuoso.openlinksw.com\">OpenLink Virtuoso</a>（开源+商业）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"对象数据库\"><a href=\"#对象数据库\" class=\"headerlink\" title=\"对象数据库\"></a>对象数据库</h4><ul>\n<li>目前使用较多的<ul>\n<li><a href=\"http://db4o.com\">db4o</a>（开源）</li>\n<li><a href=\"http://www.versant.com\">versant</a>（商业）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"网格和云数据库\"><a href=\"#网格和云数据库\" class=\"headerlink\" title=\"网格和云数据库\"></a>网格和云数据库</h4><ul>\n<li>目前使用较多的<ul>\n<li><a href=\"https://www.gridgain.com\">gridgain</a>（开源+商业）</li>\n<li><a href=\"https://crate.io\">cratedb</a>（开源） </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"XML数据库\"><a href=\"#XML数据库\" class=\"headerlink\" title=\"XML数据库\"></a>XML数据库</h4><ul>\n<li>目前使用较多的<ul>\n<li><a href=\"https://www.delltechnologies.com\">EMC Documentum xDB</a>（商业）</li>\n<li><a href=\"http://exist-db.org\">eXist</a>（开源）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"多维数据库\"><a href=\"#多维数据库\" class=\"headerlink\" title=\"多维数据库\"></a>多维数据库</h4><ul>\n<li>目前使用较多的<ul>\n<li><a href=\"http://globalsdb.org\">Globals</a>（商业）</li>\n<li><a href=\"http://www.intersystems.com\">Intersystems Cache</a>（商业） </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"多值数据库\"><a href=\"#多值数据库\" class=\"headerlink\" title=\"多值数据库\"></a>多值数据库</h4><ul>\n<li>目前使用较多的<ul>\n<li><a href=\"http://www.revelation.com/index.php/features\">OpenInsight</a>（商业）</li>\n<li><a href=\"https://www.rocketsoftware.com/products/rocket-u2\">u2</a>（商业）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"事件驱动数据库\"><a href=\"#事件驱动数据库\" class=\"headerlink\" title=\"事件驱动数据库\"></a>事件驱动数据库</h4><ul>\n<li>目前使用较多的<ul>\n<li><a href=\"https://eventstore.com\">event store</a>（开源）</li>\n<li><a href=\"https://github.com/NEventStore/NEventStore\">nevent store</a>（开源）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"时间序列-流数据库\"><a href=\"#时间序列-流数据库\" class=\"headerlink\" title=\"时间序列/流数据库\"></a>时间序列/流数据库</h4><ul>\n<li>目前使用较多的<ul>\n<li><a href=\"http://axibase.com/products/axibase-time-series-database\">Axibase</a>（开源）</li>\n<li><a href=\"http://kx.com\">kdb+</a>（个人版开源）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"科学、专业的数据库\"><a href=\"#科学、专业的数据库\" class=\"headerlink\" title=\"科学、专业的数据库\"></a>科学、专业的数据库</h4><ul>\n<li>目前使用较多的<ul>\n<li><a href=\"http://probcomp.csail.mit.edu/software/bayesdb\">bayesdb</a>（开源）</li>\n<li><a href=\"http://www.gpudb.com\">gpudb</a>（商业）</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "非关系型数据库"
            ]
        },
        {
            "id": "https://erik.xyz/2019/08/21/hbase-install/",
            "url": "https://erik.xyz/2019/08/21/hbase-install/",
            "title": "Hbase安装教程",
            "date_published": "2019-08-21T15:40:00.000Z",
            "content_html": "<p>hbase分布式数据库，很早就知道了，今天尝试在docker中搭建一下。<br>首先，安装配置hadoop环境。</p>\n<p><a href=\"https://jingyan.baidu.com/article/2d5afd69d5969585a2e28eaf.html\">hadoop安装教程</a></p>\n<p>这教程是我之前在百度经验分享的，版本是2.8，现在看了看了最新版hadoop，教程还是可以用的。</p>\n<p>安装好hadoop后别忘了配置ssh、java环境等。</p>\n<p>顺便创建用户和组为hadoop（也可以自己定义，这块不会的去预习一下linux用户和组的创建）<span id=\"more\"></span></p>\n<ul>\n<li><h4 id=\"单机配置\"><a href=\"#单机配置\" class=\"headerlink\" title=\"单机配置\"></a><a href=\"#单机配置\" title=\"单机配置\"></a>单机配置</h4><ul>\n<li>编辑hbase配置文件，在hbase目录下conf/hbase-site.xml添加</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/img/201908/2019-08-25_23-38.jpg\" alt=\"编辑配置文件\"></p>\n<p>注意哦：修改 ${user.name}为你自己的 hadoop 用户名</p>\n<ul>\n<li><p>进入/opt/hbase/conf目录下修改hbase-env.sh文件。去掉jdk指定地址注释，修改jdk配置地址<br><img src=\"/img/201908/2019-08-25_21-53.jpg\" alt=\"修改hbase-env.sh\"></p>\n<p>修改后的地址</p>\n</li>\n</ul>\n<p><img src=\"/img/201908/2019-08-25_21-54.jpg\" alt=\"修改后的地址\"></p>\n<ul>\n<li>进入hbase/bin目录执行./start-hbase.sh</li>\n</ul>\n<p><img src=\"/img/201908/2019-08-25_22-03.jpg\" alt=\"执行命令\"></p>\n<p>执行jps查看单机进程</p>\n<p>  <img src=\"/img/201908/2019-08-25_22-05.jpg\" alt=\"查看单机进程\"></p>\n<p> 单机模式已启动，进入命令界面<br> <img src=\"/img/201908/2019-08-25_22-23.jpg\" alt=\"进入命令\"></p>\n<hr>\n",
            "tags": [
                "数据库",
                "hbase安装教程",
                "hbase"
            ]
        },
        {
            "id": "https://erik.xyz/2019/04/23/mysql-fen-ku-fen-biao/",
            "url": "https://erik.xyz/2019/04/23/mysql-fen-ku-fen-biao/",
            "title": "mysql分库分表",
            "date_published": "2019-04-23T04:28:00.000Z",
            "content_html": "<p><strong>分库分表</strong></p>\n<blockquote>\n</blockquote>\n<p>php工作5年了,大部分场景都是业务层。说白了就是增删改查。也知道数据库大数据处理分库分表，一般是水平分表和垂直分表，实操是不可能的，今天看了一篇文章<a href=\"https://mp.weixin.qq.com/s/QFlUPS8X0errMwpxdBMHvg\">《分库分表？如何做到永不迁移数据和避免热点？》</a>，思路一下顺畅了。</p>\n<blockquote>\n</blockquote>\n<p> 一般来说mysql一个表大概数据量在100W查询速度跟不上了。<span id=\"more\"></span>如果每天的数据量有100W那数据这个块就要做处理了。我之前的思路是这样想的：</p>\n<blockquote>\n</blockquote>\n<p> 一个表固定分100w数据，每个表用数据id做范围分配。然后查询的时候根据id找表，但是这样有个问题，如果同一个用户数据在不同的表里，这时要查询用户的所有数据，就要连表查询，实际上分表查询是有时间和范围限制的，不存在一次性拿出所有数据的情况。（而我参加面试的时候有个面试官直接给了一个这样的问题：<br> “我这有一亿数据，一次性拿出来，用mysql如何实现。”我顿时懵逼了，没法实现，代码层可能实现，数据库查询我还真不知道。）</p>\n<blockquote>\n</blockquote>\n<p>  <strong>根据上面我看的文章介绍这是range范围方案</strong><br>   <img src=\"https://erik.xyz/wp-content/uploads/2019/2019-04-23_170042.jpg\" alt=\"\"></p>\n<p>   除了查询问题，还有一个热点问题。某个时间段数据量大增的情况，一个表就扛不住了。</p>\n<blockquote>\n</blockquote>\n<p>  <em>_文章中还介绍了hash取模法 </em>_<br>   <img src=\"https://erik.xyz/wp-content/uploads/2019/2019-04-23_171040.jpg\" alt=\"\"></p>\n<p>   hash取模法容易导致数据迁移问题，如果数据量大迁移的成本是比较高的。</p>\n<p>   <strong>根据文章介绍可以先做个范围分组，然后根据分组在用hash取模分表放数据</strong><br>   <img src=\"https://erik.xyz/wp-content/uploads/2019/2019-04-23_180531.jpg\" alt=\"\"></p>\n<p>   <em>_最终表的设计如 </em>_<br>   <img src=\"https://erik.xyz/wp-content/uploads/2019/2019-04-23_180824.jpg\" alt=\"\"></p>\n",
            "tags": [
                "mysql",
                "分库分表"
            ]
        },
        {
            "id": "https://erik.xyz/2016/03/01/mysql-ping-geng-de-ying-dui-cuo-shi/",
            "url": "https://erik.xyz/2016/03/01/mysql-ping-geng-de-ying-dui-cuo-shi/",
            "title": "mysql瓶颈的应对措施",
            "date_published": "2016-03-01T11:40:00.000Z",
            "content_html": "<p>mysql本身是存在瓶颈的，当数据量达到千万级别以上，无论mysql如何优化，其性能都显著降低（有专门团队开发并改进mysql的除外）。 那么就有以下几种办法解决。<br>1.增加mysql配置中buffer和cache的数值，增加服务器cpu数量和内存大小。<br>2.使用第三方引擎或衍生版本。例如：Percona、MariaDB、TokuDB 3.迁移到其他数据库。例如：PostgreSQL、Oracle</p>\n",
            "tags": [
                "mysql应对千万级",
                "mysql瓶颈",
                "mysql瓶颈解决办法"
            ]
        },
        {
            "id": "https://erik.xyz/2016/03/01/mysql-shu-ju-ku-ru-he-xuan-ze-cun-chu-yin-qing/",
            "url": "https://erik.xyz/2016/03/01/mysql-shu-ju-ku-ru-he-xuan-ze-cun-chu-yin-qing/",
            "title": "mysql数据库如何选择存储引擎",
            "date_published": "2016-03-01T09:50:00.000Z",
            "content_html": "<p>针对不同的业务需求来选择mysql存储引擎。 1.采用MyISAM引擎</p>\n<ul>\n<li>R/W&gt;100:1且updae相对较少。</li>\n<li>并发不高，不需要事务。</li>\n<li>表数据量小。</li>\n<li>硬件资源有限。</li>\n</ul>\n<p>2.采用InnoDB引擎<span id=\"more\"></span></p>\n<ul>\n<li>R/W比较小，频繁更新大字段。</li>\n<li>表数据量超过1000W,并发高。</li>\n<li>安全性和可用性要求高。</li>\n</ul>\n<p>3.采用Memory引擎</p>\n<ul>\n<li>有足够的内存。</li>\n<li>对数据一致性要求不高，如在线人数和Session等应用。</li>\n<li>需要定期归档的数据。</li>\n</ul>\n",
            "tags": [
                "mysql",
                "mysql存储",
                "mysql引擎",
                "mysql数据表设计选择"
            ]
        },
        {
            "id": "https://erik.xyz/2016/03/01/you-guan-mysql-you-hua-de-zhun-ze/",
            "url": "https://erik.xyz/2016/03/01/you-guan-mysql-you-hua-de-zhun-ze/",
            "title": "有关mysql优化的准则",
            "date_published": "2016-03-01T09:29:00.000Z",
            "content_html": "<p>前辈们总结的经验，学习、学习。 </p>\n<p>1.尽量避免在列上进行运算，这样会导致索引失效。 </p>\n<p>例如：SELECT <em> FROM t WHERE YEAR(d) &gt;=2011; 优化为：SELECT </em> FROM t WHERE d &gt;=’2011-01-01’;</p>\n<p>2.使用JOIN时，应该用小结果集驱动大结果集。</p>\n<p>同时把复杂的JOIN查询拆分成多个QUERY。因为JOIN多个 表时，可能导致更多的锁定和堵塞。 SELECT * FROM a JOIN b ON a.id=b.id LEFT JOIN c ON c.time=a.date LEFT JOIN d ON c.pid=d.aid LEFT JOIN e ON e.cid=a.did<br><span id=\"more\"></span></p>\n<p>3.LIKE模糊查询的使用，避免%% </p>\n<p>例如：SELECT <em> FROM t WHERE name LIKE ‘%de%’; 优化为：SELECT </em> FROM t WHERE name &gt;=’de’ AND name&lt;’df’; </p>\n<p>4.仅列出需要查询的字段，这对速度不会有明显影响，主要考虑节省内存。 </p>\n<p>5.使用批量插入语句节省交互 </p>\n<p>例如： INTO t (id,name) VALUES (1,’a’); INSERT INTO t (id,name) VALUES (2,’b’); INSERT INTO t (id,name) VALUES (3,’c’); 优化：INSERT INTO t (id,name) VALUES (1,’a’),(2,’b’),(3,’c’); </p>\n<p>6.limit的基数比较大时使用between </p>\n<p>SELECT <em> FROM article AS article ORDER BY id LIMIT 100000,10; 优化：SELECT </em> FROM article AS article WHERE id BETWEEN 100000 AND 100010 ORDER BY id; </p>\n<p>7.不要使用rand函数获取多条随机记录 </p>\n<p>SELECT <em> FROM table ORDER BY rand() LIMIT 20; 优化： SELECT </em> FROM ‘table’ AS t1 JOIN (SELECT ROUND (RAND() * ((SELECT MAX(id) FROM ‘table’)-(SELECT MIN(id) FROM ‘table’ )) + (SELECT MIN(id) FROM ‘table’ )) AS id) AS t2 WHERE t1.id&gt;=t2.id ORDER BY t1.id LIMIT 1; </p>\n<p>8.避免使用NULL </p>\n<p>9.不要使用count(id),而应该是count(*) </p>\n<p>10.不要做无谓的排序，而应尽可能在索引中完成排序。</p>\n",
            "tags": [
                "mysql",
                "mysql优化",
                "mysql读写优化",
                "数据库优化，mysql语句优化"
            ]
        },
        {
            "id": "https://erik.xyz/2015/01/09/wei-mysql-zeng-jia-http-rest-ke-hu-duan-mysql-udf-han-shu-mysql-udf-http-1-0-fa-bu/",
            "url": "https://erik.xyz/2015/01/09/wei-mysql-zeng-jia-http-rest-ke-hu-duan-mysql-udf-han-shu-mysql-udf-http-1-0-fa-bu/",
            "title": "为 MySQL 增加 HTTP/REST 客户端：MySQL UDF 函数 mysql-udf-http 1.0 发布",
            "date_published": "2015-01-09T14:38:00.000Z",
            "content_html": "<p>文章作者：张宴 Mysql-udf-http 是一款简单的MySQL用户自定义函数（UDF, User-Defined Functions），具有http_get()、http_post()、http_put()、http_delete()四个函数，可以在 MySQL数据库中利用HTTP协议进行REST相关操作。 项目网址：<a href=\"http://code.google.com/p/mysql-udf-http/\">http://code.google.com/p/mysql-udf-http/</a> 中文说明：<a href=\"http://blog.zyan.cc/mysql-udf-http/\">http://blog.zyan.cc/mysql-udf-http/</a> 使用环境：Linux操作系统，支持的MySQL版本：5.1.x 和 5.5.x。5.0.x未经测试。 软件作者：张宴<span id=\"more\"></span></p>\n<hr>\n<p><strong>一、REST架构风格：</strong> REST（Representational State Transfer）是一种轻量级的Web Service架构风格，其实现和操作明显比SOAP和XML-RPC更为简洁，可以完全通过HTTP协议实现，还可以利用缓存Cache来提高响应速 度，性能、效率和易用性上都优于SOAP协议。REST最早是由 Roy Thomas Fielding 博士2000年在论文《<a href=\"http://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm\">Architectural Styles and the Design of Network-based Software Architectures</a>》中提出的，<a href=\"http://mysql-udf-http.googlecode.com/files/REST_cn.pdf\">中文译文全文PDF点此下载</a>。另外，<a href=\"http://www.infoq.com/cn/articles/rest-introduction\">有篇译文</a>对REST做了一个简化说明。 目前，REST架构风格的常见实现是基于HTTP协议及其四种基本方法（如POST、GET、PUT和DELETE）的。有人将HTTP协议的四种方法 与CRUD原则相对应，CRUD原则对于资源只需要四种行为：Create（创建）、Read（读取）、Update（更新）和Delete（删除）就可 以完成对其操作和处理。 </p>\n<p><a href=\"http://zyan.cc/attachment/201009/crud.png\"><img src=\"http://zyan.cc/attachment/201009/crud.png\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a></p>\n<p><a href=\"http://zyan.cc/attachment/201009/rest.jpg\"><img src=\"http://zyan.cc/attachment/201009/rest.jpg\" alt=\"点击在新窗口中浏览此图片\" title=\"点击在新窗口中浏览此图片\"></a> </p>\n<p>在Mysql-udf-http中，四个函数http_post()、http_get()、http_put()、http_delete()分别对应HTTP协议的POST、GET、PUT、DELETE四种方法。 REST是一种架构风格，而不是协议或标准。HTTP协议“POST、GET、PUT、DELET”四种方法与CRUD原则“Create、Read、 Update、Delete”四种行为的一一对应关系只是一种架构设计习惯，而不是规范。因此，POST方法也可以用来更新资源，PUT方法也可以用来创 建资源，这就要看具体应用程序作者的定义了。例如<a href=\"http://zyan.cc/post/362/\">Tokyo Tyrant</a>除了支持Memcached协议外，还支持REST方式存取，PUT代表创建和更新，GET代表读取，DELETE代表删除（<a href=\"http://zyan.cc/post/362/\">关于Tokyo Tyrant的安装使用请点击这儿</a>）。 目前国内外流行的Web 2.0应用API接口中，很多都支持REST架构风格。例如：<a href=\"http://open.t.sina.com.cn/wiki/index.php/API%E6%96%87%E6%A1%A3\">新浪微博开放平台</a>、<a href=\"http://wiki.dev.renren.com/wiki/API\">人人网API</a>、Google OpenID、Flickr、Twitter、eBay、Facebook、Last.fm、del.icio.us、Yahoo Search、Amazon S3、Amazon EC2、Digg、Microsoft Bing、FriendFeed、PayPal、Foursquare，<a href=\"http://www.programmableweb.com/apis/directory/1?protocol=REST\">更多…</a> 当记录数成百上千万条时，通常采用 MySQL 分表减低数据库压力。但是，全部数据按点击数、精华、积分排序显示等功能，在MySQL 分表中则无法实现。编写 Mysql-udf-http 的最初目的，是为了在项目开发中，将 MySQL 各分表的数据自动同步到我们的 <a href=\"http://zyan.cc/tcsql/\">TCSQL</a> 高速列表数据库，用来做列表查询、显示，内容页则根据ID直接查询各 MySQL 分表的内容。由于HTTP协议的通用性，通过 Mysql-udf-http 可以做更多的事情。 <strong>通过Mysql-udf-http，你可以在MySQL中利用触发器，将MySQL的数据同步到支持REST的应用上。</strong>例如你有一个独立博客，你可以在文章表创建MySQL触发器，这样，在发表文章时，就可以将文章标题、URL自动同步到新浪微博、Twitter。你想用 <a href=\"http://zyan.cc/post/362/\">Tokyo Tyrant</a> 做缓存，也可以利用MySQL触发器在发生增、删、改时，将数据自动同步到 <a href=\"http://zyan.cc/post/362/\">Tokyo Tyrant</a>。详细配置方法本文第4节中会有介绍。</p>\n<hr>\n<p><strong>二、Mysql-udf-http的安装与使用：</strong> <strong>1. 在Linux系统上安装Mysql-udf-http</strong> 注意：“/usr/local/webserver/mysql/”是你的MySQL安装路径，如果你的MySQL安装路径不同，请自行修改。</p>\n<pre><code>ulimit -SHn 65535 \n\nwget http://curl.haxx.se/download/curl-7.21.1.tar.gz\n\ntar zxvf curl-7.21.1.tar.gz cd curl-7.21.1/ \n\n./configure --prefix=/usr \n\nmake &amp;&amp; make install \n\ncd ../\n\necho &quot;/usr/local/webserver/mysql/lib/mysql/&quot; &gt; /etc/ld.so.conf.d/mysql.conf /sbin/ldconfig \n\nwget http://mysql-udf-http.googlecode.com/files/mysql-udf-http-1.0.tar.gz \n\ntar zxvf mysql-udf-http-1.0.tar.gz \n\ncd mysql-udf-http-1.0/\n\n./configure --prefix=/usr/local/webserver/mysql --with-mysql=/usr/local/webserver/mysql/bin/mysql_config \n\nmake &amp;&amp; make install cd ../\n</code></pre><hr>\n<p><strong>2. 通过命令行登陆进入MySQL</strong></p>\n<p>/usr/local/webserver/mysql/bin/mysql -S /tmp/mysql.sock</p>\n<hr>\n<p><strong>3. 创建MySQL自定义函数</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>create function http_get returns string soname &#39;mysql-udf-http.so&#39;;\ncreate function http_post returns string soname &#39;mysql-udf-http.so&#39;;\ncreate function http_put returns string soname &#39;mysql-udf-http.so&#39;;\ncreate function http_delete returns string soname &#39;mysql-udf-http.so&#39;;\n</code></pre><hr>\n<p><strong>4. 使用方法</strong> <strong>I. 函数描述：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>SELECT http_get(&#39;&lt;url&gt;&#39;);\nSELECT http_post(&#39;&lt;url&gt;&#39;, &#39;&lt;data&gt;&#39;);\nSELECT http_put(&#39;&lt;url&gt;&#39;, &#39;&lt;data&gt;&#39;);\nSELECT http_delete(&#39;&lt;url&gt;&#39;);\n</code></pre><p><strong>II. 示例 A：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>/* HTTP GET、POST方式提交关键词“xoyo”到百度移动搜索 */\nSELECT http_get(&#39;http://m.baidu.com/s?word=xoyo&amp;pn=0&#39;);\nSELECT http_post(&#39;http://m.baidu.com/s&#39;,&#39;word=xoyo&amp;pn=0&#39;);\n\n/* 新浪微博开放平台：获取新浪用户ID为103500的最近一条微博内容 */\nSELECT http_get(&#39;http://api.t.sina.com.cn/statuses/user_timeline/103500.json?count=1&amp;source=1561596835&#39;) AS data;\n/* 新浪微博开放平台：发表一条微博 */\nSELECT http_post(&#39;http://your\\_sina\\_uid:your_password@api.t.sina.com.cn/statuses/update.xml?source=1561596835&#39;, &#39;status=Thins is sina weibo test information&#39;);\n\n/* Tokyo Tyrant 写入、读取、删除操作 */\nSELECT http_put(&#39;http://192.168.8.34:1978/key&#39;, &#39;This is value&#39;);\nSELECT http_get(&#39;http://192.168.8.34:1978/key&#39;);\nSELECT http_delete(&#39;http://192.168.8.34:1978/key&#39;);\n</code></pre><p><strong>III. 示例</strong> <strong>通过MySQL触发器，利用mysql-udf-http和第三方UDF函数lib_mysqludf_json，自动同步数据到 Tokyo Tyrant。</strong> <strong>(1). 下载安装 lib_mysqludf_json 修改版：</strong> 以下安装包适合32位Linux操作系统：</p>\n<pre><code>wget http://mysql-udf-http.googlecode.com/files/lib_mysqludf_json-i386.tar.gz\n\ntar zxvf lib_mysqludf_json-i386.tar.gz \ncd lib_mysqludf_json-i386/ \n\n# 如果你的MySQL安装路径不是/usr/local/webserver/mysql/，请修改以下路径。 \n\ncp -f lib_mysqludf_json.so  /usr/local/webserver/mysql/lib/mysql/plugin/lib_mysqludf_json.so\n\ncd ../\n</code></pre><p>以下安装包适合64位Linux操作系统：</p>\n<pre><code>wget http://mysql-udf-http.googlecode.com/files/lib_mysqludf_json-x86_64.tar.gz\n\ntar zxvf lib_mysqludf_json-x86_64.tar.gz cd lib_mysqludf_json-x86_64/ \n\n# 如果你的MySQL安装路径不是/usr/local/webserver/mysql/，请修改以下路径。\n\ncp -f lib_mysqludf_json.so /usr/local/webserver/mysql/lib/mysql/plugin/lib_mysqludf_json.so \n\ncd ../\n\n# 通过命令行登陆进入MySQL：\n\n/usr/local/webserver/mysql/bin/mysql -S /tmp/mysql.sock\n</code></pre><p>mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>create function lib\\_mysqludf\\_json_info returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\ncreate function json_array returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\ncreate function json_members returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\ncreate function json_object returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\ncreate function json_values returns string soname &#39;lib\\_mysqludf\\_json.so&#39;;\n</code></pre><p>lib_mysqludf_json的详细用法请访问：<a href=\"http://www.mysqludf.org/lib_mysqludf_json/\">http://www.mysqludf.org/lib_mysqludf_json/</a> <strong>(2). 创建测试表</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>SET NAMES UTF8;\nUSE test;\nCREATE TABLE IF NOT EXISTS `mytable` (\n  `id` int(10) NOT NULL AUTO_INCREMENT,\n  `addtime` int(10) NOT NULL,\n  `title` varchar(255) CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;\n</code></pre><p><strong>(3). 为测试表创建触发器：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>  /* INSERT插入操作的触发器 */\n  DELIMITER |\n  DROP TRIGGER IF EXISTS mytable_insert;\n  CREATE TRIGGER mytable_insert\n  AFTER INSERT ON mytable\n  FOR EACH ROW BEGIN\n      SET @tt_json = (SELECT json_object(id,addtime,title) FROM mytable WHERE id = NEW.id LIMIT 1);\n      SET @tt_resu = (SELECT http_put(CONCAT(&#39;http://192.168.8.34:1978/&#39;, NEW.id), @tt_json));\n  END |\n  DELIMITER ;\n\n  /* UPDATE更新操作的触发器 */\n DELIMITER |\n  DROP TRIGGER IF EXISTS mytable_update;\n  CREATE TRIGGER mytable_update\n  AFTER UPDATE ON mytable\n  FOR EACH ROW BEGIN\n     SET @tt_json = (SELECT json_object(id,addtime,title) FROM mytable WHERE id = OLD.id LIMIT 1);\n      SET @tt_resu = (SELECT http_put(CONCAT(&#39;http://192.168.8.34:1978/&#39;, OLD.id), @tt_json));\n  END |\n  DELIMITER ;\n\n  /* DELETE删除操作的触发器 */\n  DELIMITER |\n  DROP TRIGGER IF EXISTS mytable_delete;\n  CREATE TRIGGER mytable_delete\n  AFTER DELETE ON mytable\n  FOR EACH ROW BEGIN\n      SET @tt_resu = (SELECT http_delete(CONCAT(&#39;http://192.168.8.34:1978/&#39;, OLD.id)));\n  END |\n  DELIMITER ;\n</code></pre><p><strong>(4). 将 MySQL 表和 Tokyo Tyrant 关联进行查询：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code> SELECT id,addtime,title,http_get(CONCAT(&#39;http://192.168.8.34:1978/&#39;,id)) AS tt FROM mytable ORDER BY id DESC LIMIT 0,5;\n</code></pre><hr>\n<p><strong>5. 如何删除mysql-udf-http UDF函数：</strong> mysql&gt;</p>\n<p><a href=\"http://zyan.cc/#\">view plain</a><a href=\"http://zyan.cc/#\">print</a><a href=\"http://zyan.cc/#\">?</a></p>\n<pre><code>drop function http_get;\ndrop function http_post;\ndrop function http_put;\ndrop function http_delete;\n</code></pre><p>原文链接：<a href=\"http://blog.zyan.cc/mysql-udf-http/\">http://blog.zyan.cc/mysql-udf-http/</a>]function http_delete;</p>\n",
            "tags": [
                "数据库",
                "mysql",
                "数据表"
            ]
        }
    ]
}